# 判断是否ZIP文件
import zipfile
print(zipfile.is_zipfile('samples/archive.zip'))
True

# 读取文件系统
import zipfile
zf = zipfile.ZipFile('samples/archive.zip','r')
# list filenames
for name in zf.namelist():
    print name
#
for info in zf.infolist():
    print info.filename, info.date_time, info.file_size

# 提取数据
# 用read() 方法，以filename作为参数，以string形式返回数据
zf = zipfile.ZipFile('samples/archive.zip')
for filename in zf.namelist():
    # can use other than namelist,['there.txt','notthere.txt']
    try:
        data = zf.read(filename) # extract use read()
    except KeyError:
        print "Error: Did not find %s in zip file" % filename
    else:
        print filename, ':',
        print repr(data)


# 解压数据extract()
zf = zipfile.ZipFile('samples/archive.zip','r')
# Extract a member from the archive to the current working directory
zf.extract('a.txt') # you may want to specify path param

# Extract all members from the archive to the current working directory
zf.extractall() # you may want to specify path param

# 压缩数据
# 创建新的zip文件，只需要初始化一个新的ZipFile即可，用w模式，要添加数据，用write()方法即可
print('creating archive')
zf = zipfile.ZipFile('zipfile_write.zip',mode='w')
try:
    print('adding readme.txt')
    zf.write('readme.txt')
finally:
    print('closing')
    zf.close()

# 默认没有只是打包，没有压缩数据，如果压缩，需要用zlib模块。默认压缩模式zipfile.ZIP_STORED，可以改变为zipfile.ZIP_DEFLATED
#
# try to change compression type
try:
    import zlib
    compression = zipfile.ZIP_DEFLATED
except:
    compression = zipfile.ZIP_STORED

modes = {zipfile.ZIP_DEFLATED: 'deflated', zipfile.ZIP_STORED: 'stored'}
print('creating archive')
zf = zipfile.ZipFile('zipfile_write_compression.zip',mode='w')
try:
    print('adding README.txt with compression mode'+ str(modes[compression]))
    zf.write('readme.txt',compress_type=compression)
finally:
    print('closing')
    zf.close()


##===================================================================================================

import os
import shutil
import zipfile
from os.path import join, getsize

# 压缩指定文件夹
# src_dir：你要压缩的文件夹的路径
# zip_name：压缩后zip文件的路径及名称
def zip_file(src_dir):
    zip_name = src_dir +'.zip'
    z = zipfile.ZipFile(zip_name,'w',zipfile.ZIP_DEFLATED)
    for dirpath, dirnames, filenames in os.walk(src_dir):
        fpath = dirpath.replace(src_dir,'')
        fpath = fpath and fpath + os.sep or ''
        for filename in filenames:
            z.write(os.path.join(dirpath, filename),fpath+filename)
            print ('==压缩成功==')
    z.close()
   

# 解压
# zip_src:是zip文件的全路径
# dst_dir：是要解压到的目的文件夹
def unzip_file(zip_src, dst_dir):
    r = zipfile.is_zipfile(zip_src)
    if r:     
        fz = zipfile.ZipFile(zip_src, 'r')
        for file in fz.namelist():
            fz.extract(file, dst_dir)       
    else:
        print('This is not zip')


# 相关文件操作
#新建文件夹
os.mkdir(dst_dir)

# 遍历文件夹
for filename in os.listdir(src_dir):
    print(filename)
    
# 剪切（移动）文件到指定目录
shutil.move(filename, dst_dir)

# 删除文件夹，包含下面子文件夹或文件
shutil.rmtree(src_dir)

# 删除指定文件
os.remove(file_src)

# 复制文件
shutil.copyfile(src_file,dst_file)

# 获取文件夹大小
def get_dir_size(dir_path):
    size = 0L
    for root, dirs, files in os.walk(dir_path):
        size += sum([getsize(join(root, name)) for name in files])
    return size

# 可以根据文件大小做不同的判断，如：
file_size = get_dir_size(DATA_PATH)
max_size = file_size / 1024 / 1024   ##获得的是以Mb为单位的值
if max_size < 100:
    pass
    
#########################################################################################    
#########################################################################################
#########################################################################################
# gz： 即gzip。通常仅仅能压缩一个文件。与tar结合起来就能够实现先打包，再压缩。
#
# tar： linux系统下的打包工具。仅仅打包。不压缩
#
# tgz：即tar.gz。先用tar打包，然后再用gz压缩得到的文件
#
# zip： 不同于gzip。尽管使用相似的算法，能够打包压缩多个文件。只是分别压缩文件。压缩率低于tar。
#
# rar：打包压缩文件。最初用于DOS，基于window操作系统。

import gzip
import os
import tarfile
import zipfile
import rarfile
# gz
# 因为gz一般仅仅压缩一个文件，全部常与其它打包工具一起工作。比方能够先用tar打包为XXX.tar,然后在压缩为XXX.tar.gz
# 解压gz，事实上就是读出当中的单一文件
def un_gz(file_name):
    """ungz zip file"""
    f_name = file_name.replace(".gz", "")
    #获取文件的名称，去掉
    g_file = gzip.GzipFile(file_name)
    #创建gzip对象
    open(f_name, "w+").write(g_file.read())
    #gzip对象用read()打开后，写入open()建立的文件里。
    g_file.close()
    #关闭gzip对象

# tar
# XXX.tar.gz解压后得到XXX.tar，还要进一步解压出来。
# 注：tgz与tar.gz是同样的格式，老版本号DOS扩展名最多三个字符，故用tgz表示。
# 因为这里有多个文件，我们先读取全部文件名称。然后解压。例如以下：
# 注：tgz文件与tar文件同样的解压方法。
def un_tar(file_name):
       # untar zip file"""
    tar = tarfile.open(file_name)
    names = tar.getnames()
    if os.path.isdir(file_name + "_files"):
        pass
    else:
        os.mkdir(file_name + "_files")
    #因为解压后是很多文件，预先建立同名目录
    for name in names:
        tar.extract(name, file_name + "_files/")
    tar.close()

# zip
# 与tar类似，先读取多个文件名称，然后解压。例如以下：

def un_zip(file_name):
    """unzip zip file"""
    zip_file = zipfile.ZipFile(file_name)
    if os.path.isdir(file_name + "_files"):
        pass
    else:
        os.mkdir(file_name + "_files")
    for names in zip_file.namelist():
        zip_file.extract(names,file_name + "_files/")
    zip_file.close()


# rar
# 由于rar通常为window下使用，须要额外的Python包rarfile。
#
# 可用地址： http://sourceforge.net/projects/rarfile.berlios/files/rarfile-2.4.tar.gz/download
#
# 解压到Python安装文件夹的/Scripts/文件夹下，在当前窗体打开命令行,
#
# 输入Python setup.py install
#
# 安装完毕。

def un_rar(file_name):
    """unrar zip file"""
    rar = rarfile.RarFile(file_name)
    if os.path.isdir(file_name + "_files"):
        pass
    else:
        os.mkdir(file_name + "_files")
    os.chdir(file_name + "_files")
    rar.extractall()
    rar.close()


inputname="icons.zip"
un_zip(inputname)
# un_gz(inputname)
# un_rar(inputname)
# un_tar(inputname)
